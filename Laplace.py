{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNTVK+3EDSctveijBgQoOxL"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 130
        },
        "id": "9TRtq2_YXdeF",
        "outputId": "b763aaa8-9b79-437a-a97b-715456d5f155"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-13-9f3e9ea6d266>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    get_ipython().system('pip install control')\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# TESTE -> 1 (LIGADO) , 0 (DESLIGADO)\n",
        "\n",
        "Teste = 0\n",
        "\n",
        "# TODOS OS IMPORTS\n",
        "\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "#import control as ctl\n",
        "import numpy as np\n",
        "\n",
        "# RECEBENDO DADOS DO USUÁRIO E ARMAZENANDO-OS DEVIDAMENTE\n",
        "linha1 = input('Digite o Numerador da funcao transferencia (A B C) : ')\n",
        "linha2 = input('Digite o denominador da funcao transferencia (A B C) : ')\n",
        "\n",
        "if(Teste == 1):\n",
        "    print('')\n",
        "    print('linha1 : ',linha1)\n",
        "    print('linha2 : ',linha2)\n",
        "\n",
        "Ns = linha1.split()  # Separa os valores do numerador de 'string' para unidades no formato 'char' e anexa em Ns.\n",
        "Ds = linha2.split()  # Separa os valores do denominador de 'string' para unidades no formato 'char' e anexa em Ds.\n",
        "\n",
        "if(Teste == 1):\n",
        "    print('')\n",
        "    print('Ns : ',Ns)\n",
        "    print('Ds : ', Ds)\n",
        "\n",
        "VetNs = list(map(float,Ns)) # Map -> transforma em float de um em um , List -> \"Vetoriza\"\n",
        "VetDs = list(map(float,Ds)) # Map -> transforma em float de um em um , List -> \"Vetoriza\"\n",
        "\n",
        "if(Teste == 1):\n",
        "    print('')\n",
        "    print('VetNs : ',VetNs)\n",
        "    print('VetDs : ',VetDs)\n",
        "\n",
        "# CRIANDO A FUNÇÃO TRANSFERÊNCIA A PARTIR DOS DADOS FORNECIDOS PELO USUÁRIO\n",
        "\n",
        "Fs = ctl.TransferFunction(VetNs, VetDs) # função tf da biblioteca control, recebe Numerador e Denominador vetorizados como parâmetro e os \"transforma\" em uma função transferância.\n",
        "\n",
        "if(Teste == 1):\n",
        "    print('')\n",
        "    print('Fs : ',Fs)\n",
        "\n",
        "# DIAGRAMA DE POLOS E ZEROS\n",
        "\n",
        "polos = ctl.poles(Fs) #calcula os polos da função e entrega no modo complexo (Parte Real + Pare Imaginária)\n",
        "zeros = ctl.zeros(Fs) #calcula os polos da função e entrega no modo complexo (Parte Real + Pare Imaginária)\n",
        "\n",
        "if(Teste == 1):\n",
        "\n",
        "    print('')\n",
        "    print('Polos : ',polos)\n",
        "    print('Zeros : ',zeros)\n",
        "\n",
        "PZ = ctl.pzmap(Fs,1,0,'Diagrama de Polos e Zeros')                  # pzmap é uma função da biblioteca control que recebe como parametros (função, plot, grid, 'titulo')\n",
        "plt.show()                                                          # função da biblioteca matplotlib.pyplot que mostra o gráfico na tela.\n",
        "\n",
        "tampole=len(polos)\n",
        "tamzero=len(zeros)\n",
        "\n",
        "print('Quantos polos: ',tampole)\n",
        "print('Quantos Zeros: ',tamzero)\n",
        "\n",
        "\n",
        "# GRÁFICO 3D\n",
        "\n",
        "def f(x,y):\n",
        "\n",
        "    Num = 0\n",
        "    for i in range(tamzero):\n",
        "        calc = (X - zeros[i].real) ** 2 + (Y - zeros[i].imag) ** 2\n",
        "        Num = calc**(1/2) + Num\n",
        "\n",
        "\n",
        "    if(tampole==0):\n",
        "        Den = 1\n",
        "    else:\n",
        "        Den = 0\n",
        "        for i in range(tampole):\n",
        "            calc = (X - polos[i].real) ** 2 + (Y - polos[i].imag) ** 2\n",
        "            Den = calc**(1/2) + Den\n",
        "\n",
        "    return Num / Den\n",
        "\n",
        "x = np.linspace(-6, 6, 30)\n",
        "y = np.linspace(-6, 6, 30)\n",
        "\n",
        "X, Y = np.meshgrid(x, y)\n",
        "Z = f(X,Y)\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = plt.axes(projection='3d')\n",
        "ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis', edgecolor='none')\n",
        "\n",
        "ax.set_title('surface')\n",
        "ax.set_xlabel('real part')\n",
        "ax.set_ylabel('imaginary part')\n",
        "ax.set_zlabel('|H(s)|')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# GRÁFICO COM CORTE EM SIGMA = 0 (x = 0)\n",
        "\n",
        "fig2 = plt.figure()\n",
        "ax = plt.axes(projection='3d')\n",
        "ax.plot_surface(0, Y, Z, rstride=1, cstride=1, cmap='viridis', edgecolor='none')\n",
        "\n",
        "ax.set_title('sigma = 0')\n",
        "ax.set_xlabel('real part')\n",
        "ax.set_ylabel('imaginary part')\n",
        "ax.set_zlabel('|H(s)|')\n",
        "\n",
        "plt.show()"
      ]
    }
  ]
}